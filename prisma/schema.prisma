// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  firstName    String         @map("first_name")
  lastName     String         @map("last_name")
  email        String         @unique
  phone        String
  password     String
  isDelete     Boolean        @default(false)
  role         Role           @default(USER)
  orders       Order[]
  address      Address?
  ShoppingCart ShoppingCart[]
}

enum Role {
  ADMIN
  USER
}

model Address {
  id            Int     @id @default(autoincrement())
  userId        Int     @unique @map("user_id")
  addressNumber String? @map("address_number")
  subdistrict   String?
  district      String?
  province      String?
  zipcode       String?
  user          User    @relation(fields: [userId], references: [id])
  orders        Order[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Product {
  id           Int            @id @default(autoincrement())
  title        String         @unique
  author       String
  description  String         @db.Text
  price        Decimal        @db.Decimal(10, 2)
  amount       Int
  image        String?        @db.VarChar(1000)
  imageId      String?        @map("image_id")
  sellAmount   Int?           @default(0) @map("sell_amount")
  publisher    String?
  publishDate  String?        @map("publisher_date")
  categoryId   Int            @map("category_id")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  isDelete     Boolean        @default(false) @map("is_delete")
  category     Category       @relation(fields: [categoryId], references: [id])
  orderItems   OrderItem[]
  ShoppingCart ShoppingCart[]
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int         @map("user_id")
  addressId  Int         @map("address_id")
  summary    Decimal     @db.Decimal(10, 2)
  status     STATUS      @default(PENDING)
  isCancel   Boolean     @default(false)
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  address    Address     @relation(fields: [addressId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  payments   Payment?
}

enum STATUS {
  PENDING
  PACKING
  SHIPPING
  DELIVERED
  CANCEL
}

model Payment {
  id        Int     @id @default(autoincrement())
  slipImage String? @map("slip_image")
  orderId   Int     @unique @map("order_id")
  order     Order   @relation(fields: [orderId], references: [id])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  productId Int     @map("product_id")
  amount    Int
  summary   Decimal @db.Decimal(10, 2)
  orderId   Int     @map("order_id")
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
}

model ShoppingCart {
  id        Int     @id @default(autoincrement())
  productId Int     @map("product_id")
  amount    Int
  userId    Int     @map("user_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
